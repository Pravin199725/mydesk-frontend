{"version":3,"sources":["webpack:///src/app/_helpers/must-match.validator.ts","webpack:///src/app/registration/registration-routing.module.ts","webpack:///src/app/registration/registration.component.ts","webpack:///src/app/registration/registration.component.html","webpack:///src/app/registration/registration.module.ts"],"names":["MustMatch","controlName","matchingControlName","formGroup","control","controls","matchingControl","errors","mustMatch","value","setErrors","routes","path","component","RegistrationRoutingModule","forChild","imports","exports","RegistrationComponent","formBuilder","authService","socialAuthService","storageService","submitted","registrationForm","group","email","required","password","minLength","confirmPassword","validator","authState","subscribe","user","console","log","invalid","userInfo","get","password2","password1","onRegisterHandler","signIn","PROVIDER_ID","then","firstname","firstName","error","data","registration","reset","clearValidators","updateValueAndValidity","setData","Object","keys","map","k","signUp","signUpWithFB","signUpWithGoogle","selector","templateUrl","styleUrls","RegistrationModule","provide","useValue","autoLogin","providers","id","provider","declarations"],"mappings":"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","file":"registration-registration-module-es5.js","sourcesContent":["import { FormGroup } from '@angular/forms';\n\n// custom validator to check that two fields match\nexport function MustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n        const control = formGroup.controls[controlName];\n        const matchingControl = formGroup.controls[matchingControlName];\n\n        if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n            // return if another validator has already found an error on the matchingControl\n            return;\n        }\n\n        // set error on matchingControl if validation fails\n        if (control.value !== matchingControl.value) {\n            matchingControl.setErrors({ mustMatch: true });\n        } else {\n            matchingControl.setErrors(null);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RegistrationComponent } from './registration.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegistrationComponent\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegistrationRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MustMatch } from '../_helpers/must-match.validator';\nimport { AuthService } from '../services/auth/auth.service';\nimport { FacebookLoginProvider, GoogleLoginProvider, SocialAuthService } from 'angularx-social-login';\nimport { StorageService } from '../services/storage/storage.service';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss']\n})\nexport class RegistrationComponent implements OnInit {\n\n  registrationForm: FormGroup;\n  submitted = false;\n  errors: any[] = [];\n\n\n  constructor(private formBuilder: FormBuilder, private authService: AuthService, private socialAuthService: SocialAuthService, private storageService: StorageService) {\n\n  }\n\n  ngOnInit(): void {\n    this.registrationForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required],\n    }, {\n      validator: MustMatch('password', 'confirmPassword')\n    })\n\n    this.socialAuthService.authState.subscribe((user) => {\n      console.log('user login', user)\n    });\n\n  }\n\n  get f() { return this.registrationForm.controls; }\n\n\n  signUp() {\n    this.submitted = true;\n    if (this.registrationForm.invalid) {\n      return;\n    }\n    const userInfo = {\n      email: this.registrationForm.get('email').value,\n      password2: this.registrationForm.get('confirmPassword').value,\n      password1: this.registrationForm.get('password').value,\n    }\n    this.onRegisterHandler(userInfo);\n  }\n\n  signUpWithGoogle(): void {\n    this.socialAuthService.signIn(GoogleLoginProvider.PROVIDER_ID).then((user) => {\n      console.log('user', user)\n      const userInfo = {\n        email: user.email,\n        firstname: user.firstName,\n      }\n      this.onRegisterHandler(userInfo)\n    }).catch((error) => {\n      console.log('error', error)\n    });\n  }\n\n  signUpWithFB(): void {\n    this.socialAuthService.signIn(FacebookLoginProvider.PROVIDER_ID).then((user) => {\n      const userInfo = {\n        email: user.email,\n      }\n      this.onRegisterHandler(userInfo)\n    }).catch((error) => {\n      console.log('error', error)\n    });\n  }\n\n  // void\n  onRegisterHandler(data: any): void {\n    this.authService.registration(data).subscribe((user) => {\n      this.registrationForm.reset();\n      this.registrationForm.get('email').clearValidators();\n      this.registrationForm.get('email').updateValueAndValidity();\n      this.registrationForm.get('password').clearValidators();\n      this.registrationForm.get('password').updateValueAndValidity()\n      this.registrationForm.get('confirmPassword').clearValidators();\n      this.registrationForm.get('confirmPassword').updateValueAndValidity()\n      this.storageService.setData('userData', user);\n      this.errors = [];\n    }, (errors) => {\n      Object.keys(errors.error).map(k => this.errors = [...this.errors, ...errors.error[k]])\n    })\n  }\n\n\n}\n","<div class=\"d-flex justify-content-center bg-registration-box\">\n        <div class=\"card d-flex w-45 align-self-center c-registration-card\">\n            <div class=\"card-body c-registration-inner-card\">\n                <div class=\"text-center\">\n                    <h5 class=\"card-title\">\n                        My Desk\n                    </h5>\n                    <div class=\"alert alert-danger text-left\" role=\"alert\" *ngIf=\"errors.length > 0\">\n                        <h6>Errors!</h6>\n                        <li *ngFor=\"let error of errors\">{{error}}</li>\n                    </div>\n                    <form [formGroup]=\"registrationForm\" (ngSubmit)=\"signUp()\" class=\"d-flex flex-column align-items-center\">\n                        <label class=\"mr-auto fw-700\">Email</label>\n                        <input type=\"text\" formControlName=\"email\" class=\"form-control\"\n                            [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n                        <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback text-left\">\n                            <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                            <div *ngIf=\"f.email.errors.email\">Email must be a valid email address</div>\n                        </div>\n                        <label class=\"mr-auto fw-700 mt-3\">Password</label>\n                        <input type=\"password\" formControlName=\"password\" class=\"form-control\"\n                            [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n                        <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback text-left\">\n                            <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                            <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\n                        </div>\n\n                        <label class=\"mr-auto fw-700 mt-3\">Confirm Password</label>\n                        <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\" />\n                        <div *ngIf=\"submitted && f.confirmPassword.errors\" class=\"invalid-feedback text-left\">\n                            <div *ngIf=\"f.confirmPassword.errors.required\">Confirm Password is required</div>\n                            <div *ngIf=\"f.confirmPassword.errors.mustMatch\">Passwords must match</div>\n                        </div>\n\n                        <button name=\"signin\" class=\"btn btn-primary1 px-5 py-2 mt-3 mb-auto\">SIGN UP</button>\n                    </form>\n                    <h4 class=\"mt-3 mb-3\">OR</h4>\n                    <div class=\"text-center\">\n                        <button type=\"button\" (click)=\"signUpWithFB()\" class=\"btn btn-primary mr-4\">Sign Up With Facebook</button>\n                        <button type=\"button\" (click)=\"signUpWithGoogle()\" class=\"btn btn-danger\">Sign Up With Google</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RegistrationRoutingModule } from './registration-routing.module';\nimport { RegistrationComponent } from './registration.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SocialLoginModule, FacebookLoginProvider, GoogleLoginProvider, SocialAuthServiceConfig } from 'angularx-social-login';\n\n\n@NgModule({\n  declarations: [RegistrationComponent],\n  imports: [\n    CommonModule,\n    RegistrationRoutingModule,\n    ReactiveFormsModule,\n    SocialLoginModule\n  ],\n  providers: [\n    {\n      provide: 'SocialAuthServiceConfig',\n      useValue: {\n        autoLogin: false,\n        providers: [\n          {\n            id: GoogleLoginProvider.PROVIDER_ID,\n            provider: new GoogleLoginProvider(\n              '4814848901-m6t676c7bmmn5lj0ucrpuijc40khksc3.apps.googleusercontent.com'\n            ),\n          },\n          {\n            id: FacebookLoginProvider.PROVIDER_ID,\n            provider: new FacebookLoginProvider('998377990680624'),\n          },\n        ],\n      } as SocialAuthServiceConfig,\n    }\n  ]\n})\nexport class RegistrationModule { }\n"]}